//          You are given the heads of two sorted linked lists list1 and list2.
//          Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.
//            Return the head of the merged linked list.
/*
struct ListNode {
     int data;
     ListNode *next;
     ListNode() : data(0), next(nullptr) {}
     ListNode(int x) : data(x), next(nullptr) {}
     ListNode(int x, ListNode *next) : data(x), next(next) {}
};
*/


class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) 
    {
        if (!list1)
            return list2;
        else if (!list2)
            return list1;
    
        ListNode *head = list1;
        if (list1->val > list2->val)
        {    head = list2;
            list2 = list2->next;
        }
        else 
            list1 = list1->next;
        
        ListNode *temp = head;
        while (list1 != NULL && list2 != NULL)
        {
            if (list1->val > list2->val)
            {
                temp->next = list2;
                list2 = list2->next;
            }
            else
            {
                temp->next = list1;
                list1 = list1->next;
            }
            temp = temp->next;
        }
        if (!list1)
            temp->next = list2;
        else
            temp->next = list1;
        
        return head;
    }
};
