      // Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.

class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) 
    {
        if (head == NULL)
            return head;
        else if (head->next == NULL)
            return head;

        ListNode *prev = head;
        int value = head->val;
        ListNode *curr = head->next;
        while (prev->next != NULL)
        {
            if (curr->val == value)
            {
                prev->next = curr->next;
                curr = prev->next;
            }
            else
            {
                value = curr->val;
                prev = curr;
                curr = curr->next;
            }
        }
        return head;
    }
    // OR
    // ListNode *curr = head;
    // while (!curr&& !curr->next)
    //     if (curr->vel == curr->next->val)
    //         curr->next = curr->next->next;
    //     else
    //         curr = curr->next;
};
