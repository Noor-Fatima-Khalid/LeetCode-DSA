class Solution {
public:
    ListNode* getMiddle (ListNode *head)
    {
        ListNode *slow = head;
        ListNode *fast = head;
        while (fast && fast->next)
        {
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }

    ListNode* reverse(ListNode* head) {
        if (!head || head->next == NULL)
            return head;
        
        ListNode *prev = NULL;
        ListNode *curr = head;
        while (curr != NULL)
        {
            ListNode *forward = curr->next;
            curr->next = prev; 
            prev = curr;
            curr = forward;        
        }
        return prev;
    }
    
    bool isPalindrome(ListNode* head) {
        if (!head || !head->next)           return true;
        ListNode *middle = getMiddle(head);
        ListNode *reversed = reverse(middle);
        ListNode *temp = head;
        while(reversed)
        {
            if (temp->val != reversed->val)
                return false;
            temp = temp->next;
            reversed = reversed->next;
        }
        return true;
    }
};
